#! /usr/bin/env python


import os, time, socket
import numpy as np
from scipy.linalg import eigvalsh
from humanfriendly import format_timespan
import block2
from block2 import TETypes, PointGroup
from pyscf import gto, scf, ao2mo, symm
from i_tddmrg import MYTDDMRG, orbital_reorder, get_symCASCI_ints, getVerbosePrinter
#OLDfrom assign_defs import assign_defval
import defvals, cm_inputs
yn_bools = ('No','Yes')


#############################################
try:
    from block2.su2 import MPICommunicator
    hasMPI = True
    MPI = MPICommunicator()
    _print = getVerbosePrinter(MPI.rank==0,flush=True)
except ImportError:
    MPICommunicator = None
    hasMPI = False
    MPI = None
    _print = getVerbosePrinter(True,flush=True)

if hasMPI:
    from mpi4py import MPI as MPIpy
    commPy = MPIpy.COMM_WORLD
    #print(MPI.rank,"rank",flush=True)
    assert commPy.Get_rank() == MPI.rank, f"{commPy.Get_rank()} vs {MPI.rank}"
    assert commPy.Get_size() == MPI.size, f"{commPy.Get_size()} vs {MPI.size}"
    MAIN_PROCESS = MPI.rank == 0
else:
    MAIN_PROCESS = True
#############################################


_print('\n\n\n')
_print('-----------------------------------------')
_print('=========================================')
_print('>>>> A PROGRAM FOR THE SIMULATION OF <<<<')
_print('>>>>   CHARGE MIGRATION USING DMRG   <<<<')
_print('=========================================')
_print('-----------------------------------------')
_print('')    


if MAIN_PROCESS:
    t_start = time.time()
    
if hasMPI:
    MPI.barrier()
    print(f"# A warm welcome from MPI on {socket.gethostname()} with size {MPI.size} and rank {MPI.rank}",
              flush=True)
    MPI.barrier()


######################
#vvvv Input File vvvv#
######################
import sys
inp_file = str(sys.argv[1])
inputs = cm_inputs.get_inputs(inp_file)
if inputs['dump_inputs']:
    print('\nInput parameters:')
    for kw in inputs:
        _print('  ', kw, ' = ', inputs[kw])
    print(' ')
######################
#^^^^ Input File ^^^^#
######################


#==== Print process-related status ====#
_print('block2 build = ', block2.__file__)
_print('Using MPI? ', yn_bools[hasMPI])
def_n_threads = 1
n_threads = int(os.environ.get("OMP_NUM_THREADS", def_n_threads))
_print("Number of threads = ", n_threads)
_print('OMP_PLACES = ', os.environ.get("OMP_PLACES"))
_print('OMP_PROC_BIND = ', os.environ.get("OMP_PROC_BIND"))

def_scratch = './' + inputs['prefix'] + '.tmp'
scratch = os.environ.get("ITDDMRG_TMPDIR", def_scratch)
_print('Scratch directory = ', scratch)

    
#==== Setting up the system ====#
mol = gto.M(atom=inputs['inp_coordinates'], basis=inputs['inp_basis'],
            symmetry=inputs['inp_symmetry'])
na, nb = mol.nelec
n_mo = mol.nao
pg = mol.symmetry.lower()
_print('Atomic coordinates (in angstrom) = ', inputs['inp_coordinates'])
_print('Point group = ', pg)
_print('Number of electrons (alpha, beta) = ', mol.nelec)
_print('AO basis set = ', inputs['inp_basis'])
_print('Number of AO bases = ', mol.nao)
_print('Number of MO bases = ', n_mo)


#==== Specification of the CAS ====#
nelCore = (inputs['nCore'], inputs['nCore'])
nvir = n_mo - (inputs['nCore'] + inputs['nCAS'])
nsites = inputs['nCAS']
if MAIN_PROCESS:
    assert nelCore[0] + inputs['nelCAS'][0] == mol.nelec[0]
    assert nelCore[1] + inputs['nelCAS'][1] == mol.nelec[1]
    assert inputs['nCore'] + inputs['nCAS'] <= n_mo
_print('Number of core orbitals = ', inputs['nCore'])
_print('Number of CAS orbitals (CAS electrons) = %d (%d, %d)' %
       (inputs['nCAS'], inputs['nelCAS'][0], inputs['nelCAS'][1]))
_print('Number of virtual orbitals = ', nvir)


#==== Obtain the site orbitals ====#
if MAIN_PROCESS:
    if inputs['hf_orb_path'] is defvals.def_hf_orb_path:
        #==== Run HF on the neutral molecule if HF orbitals are not given ====#
        _print('>>>> Hartree-Fock calculation of the neutral <<<<')
        mf = scf.RHF(mol)
        mf.kernel()
        hf_orb = mf.mo_coeff
        _print('2-e integral shape, size = ', mf._eri.shape, mf._eri.size)
    else:
        #==== Load the HF orbitals of the neutral ====#
        hf_orb = np.load(inputs['hf_orb_path'])
        assert len(hf_orb.shape) == 2, 'The loaded Hartree-Fock orbitals ' + \
               'array must be a two-dimensional array (a matrix).'
        assert (hf_orb.shape[0] == n_mo and
                hf_orb.shape[1] == n_mo), \
               'The shape of the Hartree-Fock orbitals array loaded from ' + \
               str(inputs['hf_orb_path']) + ' is inconsistent with the number of MO bases (' + \
               str(n_mo) + '). The shape of the loaded orbitals array is ' + \
               str(hf_orb.shape) + ', instead of ' + str((n_mo, n_mo)) + '. Some ' + \
               'reasons may be that the basis set or the molecular species used ' + \
               'to obtain the above HF orbitals is different than what is used ' + \
               'for this simulation.'
    hf_orb_shape = hf_orb.shape


    #==== Get the integrals ====#
    h1e, g2e, ecore, molpro_osym, molpro_wsym = \
         get_symCASCI_ints(mol, inputs['nCore'], inputs['nCAS'], inputs['nelCAS'], hf_orb,
                           True)
    g2e = ao2mo.restore('s8', g2e, inputs['nCAS'])   # For some reason 's4' for the first parameter results in an error later on inside FCIDUMP.initialize_su2.
    h1eshape = h1e.shape
    g2eshape = g2e.shape
else:
    hf_orb = h1e = g2e = None
    hf_orb_shape = h1eshape = g2eshape = None
    ecore = None
    molpro_osym = molpro_wsym = None

if hasMPI:
    hf_orb_shape = commPy.bcast(hf_orb_shape, root = 0)
    h1eshape = commPy.bcast(h1eshape, root = 0)
    g2eshape = commPy.bcast(g2eshape, root = 0)
    if not MAIN_PROCESS:
        hf_orb = np.empty(hf_orb_shape, dtype=np.float64)
        h1e = np.empty(h1eshape, dtype=np.float64)
        g2e = np.empty(g2eshape, dtype=np.float64)
    commPy.Bcast([hf_orb, MPIpy.DOUBLE], root=0)
    commPy.Bcast([h1e, MPIpy.DOUBLE], root=0)
    commPy.Bcast([g2e, MPIpy.DOUBLE], root=0)
    ecore = commPy.bcast(ecore, root = 0)
    molpro_osym = commPy.bcast(molpro_osym, root = 0)
    molpro_wsym = commPy.bcast(molpro_wsym, root = 0)

    
#==== Reorder orbitals ====#
if MAIN_PROCESS:
    re_idx = orbital_reorder(h1e, g2e)
    re_idx_shape = re_idx.shape
    re_idx_type = type(re_idx)
else:
    re_idx = re_idx_shape = re_idx_type = None

if hasMPI:
    re_idx_shape = commPy.bcast(re_idx_shape, root = 0)
    re_idx_type = commPy.bcast(re_idx_type, root = 0)
    if not MAIN_PROCESS:
        re_idx = np.empty(re_idx_shape, dtype=re_idx_type)
    commPy.Bcast([re_idx, MPIpy.INTEGER], root=0)


#==== Initiate the Hamiltonian MPO ====#
_print(f'Memory allocation = {inputs["memory"]} Bytes')
obj = MYTDDMRG(scratch, inputs['memory'], omp_threads=n_threads, mpi=MPI)
obj.verbose = inputs['verbose_lvl']
obj.init_hamiltonian(pg, nsites, inputs['nelCAS'][0]+inputs['nelCAS'][1],
                     inputs['nelCAS'][0]-inputs['nelCAS'][1], molpro_wsym, 
                     molpro_osym, e_core=ecore, h1e=h1e, g2e=g2e, idx=re_idx,
                     save_fcidump=None)


#==== Print symmetries ====#
_print('Number of sites = %d (identical to the number of CAS orbitals)' % nsites)
swap_pg = getattr(PointGroup, "swap_" + pg)
osym = map(swap_pg, molpro_osym)
_print('CAS orbitals symmetries = ', [symm.irrep_id2name(mol.groupname, s) for s in osym])
wsym = swap_pg(molpro_wsym)
_print('MPS symmetry = ', symm.irrep_id2name(mol.groupname, wsym))
_print('Core energy = %12.8f Hartree' % ecore)


if inputs['do_groundstate']:
    #==== Run the DMRG ground state iterations ====#
    _print('\n\n\n')
    _print('-------------------------------------')
    _print('=====================================')
    _print('>>>> GROUND STATE DMRG ITERATION <<<<')
    _print('=====================================')
    _print('-------------------------------------')
    _print('')
    _print('Ground state bond dimensions schedule = ', inputs['D_gs'])
    _print('Ground state noises schedule = ', inputs['gs_noise'])
    _print('Ground state Davidson thresholds schedule = ', inputs['gs_dav_tols'])
    if inputs['gs_outmps_dir'] == 'DEFINE_LATER':
        inputs['gs_outmps_dir'] = scratch
        kw = 'gs_outmps_dir'
        if inputs['dump_inputs']:
            _print('  ', kw, ' = ', inputs[kw])
    obj.dmrg(inputs['D_gs'], inputs['gs_noise'], inputs['gs_steps'],
             inputs['gs_dav_tols'], inputs['gs_conv_tol'], inputs['gs_cutoff'], None,
             inputs['gs_bias'], inputs['gs_outmps_dir'], inputs['gs_outmps_fname'],
             inputs['save_gs_1pdm'])
    _print('\n')


if inputs['do_annihilate']:    
    #==== Apply the annihilation operator ====#
    _print('\n\n\n')
    _print('----------------------------------------------')
    _print('==============================================')
    _print('>>>> APPLICATION OF ANNIHILATION OPERATOR <<<<')
    _print('==============================================')
    _print('----------------------------------------------')
    _print('')
    #OLD D_ann_fit = [d + inputs['ann_fit_margin'] for d in inputs['D_gs']]
    _print('Fitting bond dimensions schedule = ', inputs['D_ann_fit'])
    _print('Fitting noises schedule = ', inputs['ann_fit_noise'])
    if inputs['ann_inmps_dir'] == 'DEFINE_LATER':
        inputs['ann_inmps_dir'] = scratch
        kw = 'ann_inmps_dir'
        if inputs['dump_inputs']:
            _print('  ', kw, ' = ', inputs[kw])
    if inputs['ann_outmps_dir'] == 'DEFINE_LATER':
        inputs['ann_outmps_dir'] = scratch
        kw = 'ann_outmps_dir'
        if inputs['dump_inputs']:
            _print('  ', kw, ' = ', inputs[kw])
    obj.annihilate(inputs['D_ann_fit'], inputs['ann_fit_noise'], inputs['ann_fit_tol'], inputs['ann_fit_steps'],
                   inputs['ann_inmps_dir'], inputs['ann_inmps_fname'], inputs['ann_outmps_dir'],
                   inputs['ann_outmps_fname'], inputs['ann_id'], inputs['ocoeff'], 
                   inputs['ann_fit_cutoff'], inputs['ann_sp'], None, inputs['ann_fit_bias'], 
                   inputs['normalize_annout'], inputs['save_ann_1pdm'])
    _print('\n')
    

#==== Run the DMRG TD-propagation ====#
if inputs['do_timeevo']:
    _print('\n\n\n')
    _print('-----------------------------------')
    _print('===================================')
    _print('>>>> TIME EVOLUTION OF THE MPS <<<<')
    _print('===================================')
    _print('-----------------------------------')
    _print('')

    sample_dir = './' + inputs['prefix'] + '.sample'
    if inputs['te_method'] == 'tdvp':
        method = TETypes.TangentSpace
    elif inputs['te_method'] == 'rk4':
        method = TETypes.RK4
    else:
        raise ValueError('The possible choice for te_method is either \'tdvp\' or ' +
                         '\'rk4\', while the current value is \'' + inputs['te_method'] +
                         '\'.')
    if inputs['te_inmps_dir'] == 'DEFINE_LATER':
        inputs['te_inmps_dir'] = scratch
        kw = 'te_inmps_dir'
        if inputs['dump_inputs']:
            _print('  ', kw, ' = ', inputs[kw])
    obj.time_propagate(inputs['te_max_D'], method, inputs['tmax'], inputs['dt'], 
                       inputs['te_inmps_dir'], inputs['te_inmps_fname'], inputs['exp_tol'], 
                       inputs['te_cutoff'], inputs['te_normalize'], inputs['n_sub_sweeps'],
                       inputs['n_sub_sweeps_init'], inputs['krylov_size'], inputs['krylov_tol'], 
                       inputs['te_sample'], inputs['te_save_mps'], inputs['te_save_1pdm'],
                       inputs['te_save_2pdm'], sample_dir)
    _print('\n')


#==== Wrapping up ====#
if MAIN_PROCESS:
    t_fin = time.time()
_print('Total computational time = ' + format_timespan(t_fin-t_start, max_units=5))


_print('\n\n\n')
_print('--------------------------')
_print('==========================')
_print('>>>> PROGRAM FINISHED <<<<')
_print('==========================')
_print('--------------------------')
_print('')














#####################################################
##################### GRAVEYARD #####################
#####################################################
        #OLD h1e = mol.ao2mo(mf.mo_coeff, intor='int1e_kin') + mol.ao2mo(mf.mo_coeff, intor='int1e_nuc')    # BAD, the shape of h1e is not nbas x nbas.
        #OLD _print('h1e shape = ', h1e.shape)
        
        #OLD h1e = mf.mo_coeff.T @ mf.get_hcore() @ mf.mo_coeff
        #OLD g2e_method = 2
        #OLD if (g2e_method == 1):
        #OLD     g2e_ = mol.intor('int2e')
        #OLD     g2e = ao2mo.kernel(g2e_, mf.mo_coeff, aosym='s1')
        #OLD elif (g2e_method == 2):
        #OLD     g2e = ao2mo.kernel(mol, mf.mo_coeff, aosym='s1')
        #OLD #g2e = mol.ao2mo(mf.mo_coeff, intor='int2e')     # BAD because one cannot specify the symmetry of the resulting integral,
        #OLD                                                  # on the other hand, the orbital_reorder function requires no symmetry if
        #OLD                                                  # the integrals are not tuple, which is true here (they are tuple for UHF).
        #OLD ecore = mol.energy_nuc()
        #OLD nsites = n_mo
        #OLD molpro_wsym = 1
        #OLD molpro_osym = [1] * n_mo
#####################################################
#####################################################
