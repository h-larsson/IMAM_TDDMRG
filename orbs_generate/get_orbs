#! /usr/bin/env python

import os, sys, time
from functools import reduce
from humanfriendly import format_timespan
import numpy as np
from pyscf import gto
from pyscf.tools import cubegen
from orbs_gen import get_rhf_orbs, get_casscf_orbs, get_dft_orbs
from get_orbs_input import get_inputs
from orbs_generate.analyze_orbs import analyze, analyze_multipole, analyze_population
from local_orbs import localize


t_start = time.time()

######################
#vvvv Input File vvvv#
######################
import sys
inp_file = str(sys.argv[1])
inputs = get_inputs(inp_file)
if inputs['dump_inputs']:
    print('\nInput parameters:')
    for kw in inputs:
        print('  ', kw, ' = ', inputs[kw])
    print(' ')
######################
#^^^^ Input File ^^^^#
######################



#==== Setting up the system ====#
mol = gto.M(atom=inputs['inp_coordinates'], basis=inputs['inp_basis'], ecp=inputs['inp_ecp'],
            symmetry=inputs['inp_symmetry'])
na, nb = mol.nelec
pg = mol.groupname.lower()
n_mo = mol.nao
print('Point group = ', mol.groupname)
print('Number of electrons (alpha, beta) = ', mol.nelec)
print('Number of AO bases = ', mol.nao)
print('Number of MO bases = ', n_mo)


#==== Generate orbitals based on the chosen method ====#
#==== HF ====#
if inputs['source'] == 'rhf':
    outs = get_rhf_orbs(mol, inputs['sz'], True, inputs['natorb'])
    orbs = outs['orbs']
    occs = outs['occs']
    ergs = outs['ergs']
    try:
        rdm = outs['rdm']
    except KeyError:
        rdm = None
        print(' >>> ATTENTION <<<')
        print('   The RDM from the Hartree-Fock calculation will not be saved.')

        
#==== CASSCF ====#
elif inputs['source'] == 'casscf':
    init_orbs_ = np.load(inputs['init_orbs'])
        
    outs = get_casscf_orbs(
        mol, inputs['nCAS'], inputs['nelCAS'], init_orbs_, inputs['frozen'], 
        inputs['ss'], inputs['ss_shift'], inputs['sz'], inputs['wfnsym'], inputs['natorb'], 
        True, 2, inputs['fcisolver'], inputs['max_bond_dim'], inputs['sweep_tol'],
        inputs['dmrg_nthreads'])
    orbs = outs['orbs']
    occs = outs['occs']
    try:
        ergs = outs['ergs']
    except KeyError:
        ergs = None
        print(' >>> ATTENTION <<<')
        print('   The energies from the CASSCF calculation will not be saved.')
    try:
        rdm = outs['rdm']
    except KeyError:
        rdm = None
        print(' >>> ATTENTION <<<')
        print('   The RDM from the CASSCF calculation will not be saved.')


#==== DFT ====#
elif inputs['source']  == 'dft':
    outs = get_dft_orbs(mol, inputs['xc'], inputs['sz'], True, inputs['natorb'])
    orbs = outs['orbs']
    occs = outs['occs']
    ergs = outs['ergs']
    try:
        rdm = outs['rdm']
    except KeyError:
        rdm = None
        print(' >>> ATTENTION <<<')
        print('   The RDM from the DFT calculation will not be saved.')

else:
    pass



#==== Localization ====#
if inputs['localize']:
    # inputs['loc_subs'] is a list of lists of integers. These integers define the base-1 ID
    # of the localized orbitals for each subspace.

    
    #== Try to assign orbitals to be localized ==#
    try:
        orbs_loc = np.load(inputs['orbs_for_loc'])
    except (FileNotFoundError, KeyError):
        try:      # 1)
            orbs_loc = orbs
        except NameError:
            raise RuntimeError('get_orbs: There is no input orbitals found to be localized.')
    # 1) Successful if a previous SCF calculations in the same run outputs orbitals.

    
    #== Try to assign RDM needed for the occupations of localized orbs ==#
    has_rdm_loc = True
    try:
        rdm_loc = np.load(inputs['rdm_for_loc'])
    except (FileNotFoundError, KeyError):
        try:
            rdm_loc = rdm
        except NameError:
            has_rdm_loc = False

    if inputs['update_loc_rdm']:
        assert has_rdm_loc, 'An RDM must be available for localization if update_loc_rdm ' + \
            'is True.'
            
    if inputs['update_loc_occs']:
        assert has_rdm_loc, 'An RDM must be available for localization if update_loc_occs ' + \
            'is True.'
        occs = np.diag(rdm_loc).copy()
            
            
    #== Do localization ==#
    for i in range(0, len(inputs['loc_subs'])):
        iloc0 = inputs['loc_subs'][i]
        iloc = [iloc0[j]-1 for j in range(0,len(iloc0))]
        if inputs['update_loc_occs']:
            orbs[:,iloc], occs[iloc] = \
                localize(orbs_loc[:,iloc], mol, inputs['loc_type'][i], 
                         inputs['loc_irrep'][i], rdm_loc[np.ix_(iloc, iloc)])
        else:
            orbs[:,iloc] = localize(orbs_loc[:,iloc], mol, inputs['loc_type'][i],
                                    inputs['loc_irrep'][i])
            occs[iloc] = None

    ergs = None
    if inputs['update_loc_rdm']:
        ovl = mol.intor('int1e_ovlp')
        rdm = reduce(np.dot, (orbs.T, ovl, orbs_loc, rdm_loc, orbs_loc.T, ovl, orbs))
                     

           
#==== Analyze the final orbitals ====#
print('\n\nOrbital occupations, energies, and symmetries:')
analyze(mol, orbs, occs, ergs)
print('\n\nOrbital multipole components:')
analyze_multipole(mol, orbs)
print('\n\nOrbital atomic populations:')
analyze_population(mol, orbs, 'low')


save_prefix = inputs['save_dir'] + '/' + inputs['prefix']


np.save(save_prefix + '.orb', orbs)


occs_msg = '   No occupation vector to be saved. **BE WARNED** that if an occupation ' + \
           'vector file is pre-existing in the same diractory, its occupation\n' + \
           '   values may not correspond to the same parameters used in the current ' + \
           'simulation.'
if occs is not None:
    if not inputs['localize'] or (inputs['localize'] and inputs['update_loc_occs']):
        np.save(save_prefix + '.occ', occs)
        print('\n *** INFO***')
        print('   Occupation vector has been saved to ' + save_prefix + '.occ.npy')
    else:
        print('\n >>> ATTENTION <<<')
        print(occs_msg)
else:
    print('\n >>> ATTENTION <<<')
    print(occs_msg)

    
if ergs is not None:
    np.save(save_prefix + '.erg', ergs)
    print('\n *** INFO***')
    print('   Energy vector has been saved to ' + save_prefix + '.erg.npy')
else:
    print('\n >>> ATTENTION <<<')
    print('   No energy vector to be saved. **BE WARNED** that if an energy ' + \
          'vector file is pre-existing in the same diractory, its energy\n' + \
          '   values may not correspond to the same parameters used in the current ' + \
          'simulation.')


rdm_msg = '   No RDM array to be saved. **BE WARNED** that if an RDM ' + \
          'array file is pre-existing in the same diractory, its RDM\n' + \
          '   values may not correspond to the same parameters used in the current ' + \
          'simulation.'
if rdm is not None:
    if not inputs['localize'] or (inputs['localize'] and inputs['update_loc_rdm']):
        np.save(save_prefix + '.rdm', rdm)
        print('\n *** INFO***')
        print('   RDM array has been saved to ' + save_prefix + '.rdm.npy')
    else:
        print('\n >>> ATTENTION <<<')
        print(rdm_msg)
else:
    print('\n >>> ATTENTION <<<')
    print(rdm_msg)
                    


print('')
t_fin = time.time()
print('Total computational time = ' + format_timespan(t_fin-t_start, max_units=5))
print('\n\n')
