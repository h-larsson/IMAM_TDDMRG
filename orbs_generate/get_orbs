#! /usr/bin/env python

import os, sys, time
from functools import reduce
from humanfriendly import format_timespan
import numpy as np
from pyscf import gto
from pyscf.tools import cubegen
from IMAM_TDDMRG.orbs_generate.orbs_gen import get_rhf_orbs, get_casscf_orbs, get_dft_orbs
from IMAM_TDDMRG.orbs_generate.get_orbs_input import get_inputs
from IMAM_TDDMRG.orbs_generate.util_orbs import sort_similar, sort_irrep
from IMAM_TDDMRG.orbs_generate.analyze_orbs import analyze, analyze_multipole, analyze_population
from IMAM_TDDMRG.orbs_generate.local_orbs import localize
from IMAM_TDDMRG.utils.util_print import print_warning, print_section


t_start = time.time()


#==== Git information ====#
try:
    # Ref. : https://stackoverflow.com/questions/26134026/how-to-get-the-current-checked-out-git-branch-name-through-pygit2
    exec_path = os.path.realpath(__file__)
    from pygit2 import Repository
    repo = Repository(exec_path)
    print_section('Git version')
    print('  * Branch = ', repo.head.shorthand)
    print('  * Revision version = ', repo.head.target)
except:
    print('Git version information is not available - it will be ignored.')

    
######################
#vvvv Input File vvvv#
######################
import sys
inp_file = str(sys.argv[1])
inputs = get_inputs(inp_file)
if inputs['dump_inputs']:
    print('\nInput parameters:')
    for kw in inputs:
        print('  ', kw, ' = ', inputs[kw])
    print(' ')
######################
#^^^^ Input File ^^^^#
######################



#==== Setting up the system ====#
mol = gto.M(atom=inputs['inp_coordinates'], basis=inputs['inp_basis'], ecp=inputs['inp_ecp'],
            symmetry=inputs['inp_symmetry'], charge=inputs['charge'], spin=inputs['twosz'])
na, nb = mol.nelec
pg = mol.groupname.lower()
n_mo = mol.nao
ovl = mol.intor('int1e_ovlp')
print('Point group = ', mol.groupname)
print('Charge = ', mol.charge)
print('Number of electrons (alpha, beta, total) = ' +
      f'{mol.nelec[0]}, {mol.nelec[1]}, {mol.nelectron}')
print('Number of AO bases = ', mol.nao)
print('Number of MO bases = ', n_mo)
save_prefix = inputs['save_dir'] + '/' + inputs['prefix']


#==== Initial values ====#
try:
    orbs = np.load(inputs['init_orbs'])
    print('Input orbitals found:\n    ' + inputs['init_orbs'])
except:
    orbs = None
    print('No input orbitals found.')
try:
    occs = np.load(inputs['init_occs'])
    print('Input occupation numbers found:\n    ' + inputs['init_occs'])
except:
    occs = None
    print('No input occupation numbers found.')
try:
    ergs = np.load(inputs['init_ergs'])
    print('Input orbital energies found:\n    ' + inputs['init_ergs'])
except:
    ergs = None
    print('No input orbital energies found.')
try:
    rdm = np.load(inputs['init_rdm'])
    print('Input RDM found:\n    ' + inputs['init_rdm'])
except:
    rdm = None
    print('No input RDM found.')

    
#==== Generate orbitals based on the chosen method ====#
#==== HF ====#
if inputs['source'] == 'rhf':
    outs = get_rhf_orbs(mol, True, inputs['conv_tol'], inputs['natorb'], init_orb=orbs)
    orbs = outs['orbs']
    occs = outs['occs']
    ergs = outs['ergs']
    try:
        rdm = outs['rdm']
    except KeyError:
        rdm = None
        print(' >>> ATTENTION <<<')
        print('   The RDM from the Hartree-Fock calculation will not be saved.')

        
#==== CASSCF ====#
elif inputs['source'] == 'casscf':
    if inputs['init_orbs'] is not None:
        init_orbs_ = orbs.copy()
    else:
        raise ValueError('When source is casscf, input keyword init_orbs must be given a ' +
                         'valid orbitals.')

    dmrg_nthreads = int(os.environ.get("OMP_NUM_THREADS", 1))
    outs = get_casscf_orbs(
        mol, inputs['nCAS'], inputs['nelCAS'], init_orbs_, inputs['frozen'], 
        inputs['ss'], inputs['ss_shift'], inputs['twosz'], inputs['wfnsym'], inputs['natorb'], 
        inputs['init_basis'], inputs['state_average'], inputs['sa_weights'],
        inputs['sort_out'], True, 2, inputs['conv_tol'], inputs['fcisolver'],
        inputs['max_bond_dim'], inputs['sweep_tol'], dmrg_nthreads, inputs['set_cas_sym'])
    orbs = outs['orbs']
    occs = outs['occs']
    try:
        ergs = outs['ergs']
    except KeyError:
        ergs = None
        print(' >>> ATTENTION <<<')
        print('   The energies from the CASSCF calculation will not be saved.')
    try:
        rdm = outs['rdm']
    except KeyError:
        rdm = None
        print(' >>> ATTENTION <<<')
        print('   The RDM from the CASSCF calculation will not be saved.')
    if inputs['state_average']:
        try:
            rdm_states = outs['rdm_states']
        except KeyError:
            rdm_states = None
            print(' >>> ATTENTION <<<')
            print('   State averaging is active but the RDMs of the individual states ' +
                  'in the ensemble will not be saved.')


#==== DFT ====#
elif inputs['source']  == 'dft':
    if inputs['init_orbs'] is not None:
        print('An initial orbital is detected. However, at the moment, the dft method \n' +
              'does not support guess/initial orbitals. The above initial orbitals \n' +
              'will be ignored.\n')
    outs = get_dft_orbs(mol, inputs['xc'], inputs['conv_tol'], True, inputs['natorb'])
    orbs = outs['orbs']
    occs = outs['occs']
    ergs = outs['ergs']
    try:
        rdm = outs['rdm']
    except KeyError:
        rdm = None
        print(' >>> ATTENTION <<<')
        print('   The RDM from the DFT calculation will not be saved.')

else:
    print('This job does not generate orbitals using any quantum chemistry methods ' +
          'in the same run.')






#=======================================================#
#==== BEYOND THIS POINT, A VALID ORBITAL MUST EXIST ====#
assert orbs is not None, \
    'No orbitals have been calculated or supplied. Either specify a valid option for \n' + \
    'the input keyword ''source'' or supply the orbitals directly by specifying its \n' + \
    'path using the input keyword ''init_orbs''.\n'
#=======================================================#






#==== Localization ====#
if inputs['localize']:
    # inputs['loc_subs'] is a list of lists of integers. These integers define the base-1 ID
    # of the localized orbitals for each subspace.

    # Below, the localization algorithm will use the available orbitals whether
    # provided by a previous 'source'-based calculation or by loading them through
    # 'init_orbs'.
    #== Try to assign orbitals to be localized ==#
    orbs_init = orbs.copy()
    
    #== Try to assign RDM needed for the occupations of localized orbs ==#
    try:
        rdm_init = rdm.copy()  #OLDnp.load(inputs['rdm_for_loc'])
    except:
        rdm_init = None
        
    if rdm_init is not None and inputs['source']=='casscf':
        if inputs['state_average']:
            print_warning('When orbitals localization is active and the orbitals are ' +
                          'generated in the same run using CASSCF with state averaging, ' +
                          'the RDM that will be processed by the localization algorithm ' +
                          'is the total ensemble RDM.')
            
    #== If occupations-based localization subspace is requested ==#
    if inputs['loc_type'] == 'DEFINE_LATER':
        inputs['loc_type'] = None
    if inputs['loc_irrep'] == 'DEFINE_LATER':
        inputs['loc_irrep'] = None
    outs = localize(mol, orbs_init, rdm_init, ovl, inputs['loc_subs'],
                    inputs['loc_occs'], inputs['loc_type'], inputs['loc_irrep'],
                    inputs['loc_exclude'], inputs['loc_sort'])

    #== Outputs ==#
    orbs = outs['orbs']
    occs = outs['occs']
    ergs = None
    trans_loc = outs['coef']
    np.save(save_prefix + '.loc', trans_loc)
    if rdm_init is not None:
        rdm = outs['rdm']
    else:
        rdm = None
        print(' >>> ATTENTION <<<')
        print('   The RDM from orbitals localization will not be saved.')

        
#==== Orbitals sorting ====#
if inputs['sorting']['type'] is not None:
    if inputs['sorting']['range'] == 'DEFINE_LATER':
        isort1 = 0
        isort2 = mol.nao
    else:
        isort1 = inputs['sorting']['range'][0] - 1
        isort2 = inputs['sorting']['range'][1]

    #== Get sorting indices ==#
    if inputs['sorting']['type'] == 'reference':
        osort_ref = np.load(inputs['sorting']['orb_ref'])
        idsort = sort_similar(orbs[:,isort1:isort2], osort_ref[:,isort1:isort2], 
                              ovl, inputs['sorting']['similar_thr'],
                              inputs['sorting']['dissimilar_break'])    
    elif inputs['sorting']['type'] == 'irrep':
        idsort = sort_irrep(mol, orbs[:,isort1:isort2], inputs['sorting']['irrep_sort'])
    idsort = idsort + isort1
        
    #== Sort orbitals, occupations, etc ==#
    orbs[:,isort1:isort2] = orbs[:,idsort]
    if occs is not None: occs[isort1:isort2] = occs[idsort]
    if ergs is not None: ergs[isort1:isort2] = ergs[idsort]
    if rdm is not None:
        assert len(rdm.shape) == 2
        rdm[isort1:isort2,isort1:isort2] = rdm[isort1:isort2,idsort]
        rdm[isort1:isort2,isort1:isort2] = rdm[idsort,isort1:isort2]
else:
    pass

        
#==== Ensure that the output orbitals are orthonormal ====#
itest = orbs.T @ ovl @ orbs
nn = orbs.shape[0]
dg = np.diag(itest).copy()    # Extract the diagonal element of itest.
sum_diag = np.sum(dg)
sum_ndiag = np.sum(itest-np.diag(dg)) / (nn*(nn-1))
#print('ortho', sum_diag, nn, sum_ndiag)
#assert abs(sum_diag - nn) < 1.0E-12 and abs(sum_ndiag) < 1.0E-12, \
#    'ERROR: Output orbitals are not orthonormal.'
           
#==== Analyze the final orbitals ====#
print('\n\nOrbital occupations, energies, and symmetries:')
analyze(mol, orbs, occs, ergs)
print('\n\nOrbital multipole components:')
analyze_multipole(mol, orbs)
print('\n\nOrbital atomic populations:')
analyze_population(mol, orbs, 'low')


#==== Save final orbitals ====#
np.save(save_prefix + '.orb', orbs)


#==== Save final occupations ====#
if occs is not None:
    np.save(save_prefix + '.occ', occs)
    print('\n *** INFO***')
    print('   Occupation vector has been saved to ' + save_prefix + '.occ.npy')
else:
    print('\n >>> ATTENTION <<<')
    print('   No occupation vector to be saved. **BE WARNED** that if an occupation ' + \
          'vector file is pre-existing in the same diractory, its occupation\n' + \
          '   values may not correspond to the same parameters used in the current ' + \
          'simulation.')


#==== Save final energies ====#
if ergs is not None:
    np.save(save_prefix + '.erg', ergs)
    print('\n *** INFO***')
    print('   Energy vector has been saved to ' + save_prefix + '.erg.npy')
else:
    print('\n >>> ATTENTION <<<')
    print('   No energy vector to be saved. **BE WARNED** that if an energy ' + \
          'vector file is pre-existing in the same diractory, its energy\n' + \
          '   values may not correspond to the same parameters used in the current ' + \
          'simulation.')

    
#==== Save final RDM ====#
if rdm is not None:
    np.save(save_prefix + '.rdm', rdm)
    print('\n *** INFO***')
    print('   RDM array in MO basis has been saved to ' + save_prefix + '.rdm.npy')
else:
    print('\n >>> ATTENTION <<<')
    print('   No RDM array to be saved. **BE WARNED** that if an RDM array file ' + \
          'is pre-existing in the same diractory, its RDM values may not correspond \n' + \
          '   to the same parameters used in the current simulation.')
if inputs['source'] == 'casscf':
    if inputs['state_average']:
        if rdm_states is not None:
            np.save(save_prefix + '.rdm_sa', rdm_states)
            print('\n *** INFO***')
            print('   RDM_states array in MO basis has been saved to ' + save_prefix + '.rdm_sa.npy')
        else:
            print('\n >>> ATTENTION <<<')
            print('   No RDM_states array to be saved. **BE WARNED** that if an RDM_states array file ' + \
                  'is pre-existing in the same diractory, its RDM_states values may not correspond \n' + \
                  '   to the same parameters used in the current simulation.')    

print('')
t_fin = time.time()
print('Total computational time = ' + format_timespan(t_fin-t_start, max_units=5))
print('\n\n')
