#! /usr/bin/env python

import sys
import numpy as np


inp_dir = str(sys.argv[1])
ref_line1 = 'loading reorder for restarting ='
ref_line2 = 'using fiedler reorder ='

with open(inp_dir + '/dmrg.out', 'r') as outfile:
    lines_ = outfile.read()
    lines = lines_.split('\n')

    closed = False
    order_found = False
    orb_order = []
    i = 0
    while not closed and i < len(lines):
        i = i + 1
        print(i, lines[i])
        if lines[i][0:len(ref_line1)] == ref_line1 or \
           lines[i][0:len(ref_line2)] == ref_line2:
            
            if lines[i][0:len(ref_line1)] == ref_line1: nrline = len(ref_line1)
            if lines[i][0:len(ref_line2)] == ref_line2: nrline = len(ref_line2)
            print(f'>> Orbital ordering is found at line {i}.')
            val_line = lines[i][nrline:]
            id1 = val_line.find('[')
            id2 = val_line.find(']')
            if id2 > -1:
                assert id2 > id1
                orb_order = list(map(int, val_line[id1+1:id2].split()))
                closed = True
            else:
                orb_order = list(map(int, val_line[id1+1:].split()))
                closed = False
            order_found = True
        else:
            if order_found:
                id2 = lines[i].find(']')
                if id2 > -1:
                    orb_order = orb_order + list(map(int, lines[i][0:id2].split()))
                    closed = True
                elif id2 == -1:
                    orb_order = orb_order + list(map(int, lines[i][0:].split()))
                    closed = False
            
print('Orbital order = ', orb_order)            
np.save('dmrgscf_order', np.array(orb_order))
