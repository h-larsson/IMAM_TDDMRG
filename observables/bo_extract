#! /usr/bin/env python

import sys, os, glob
import numpy as np
from pyscf import gto
from IMAM_TDDMRG.utils.util_qm import make_full_dm
from IMAM_TDDMRG.utils.util_print import print_td_bo
from IMAM_TDDMRG.observables import extract_time, bond_order, bo_inputs


#============================#
#==== EXAMPLE INPUT FILE ====#
#============================#
'''
#== General ==#
dump_inputs = True
prefix = 'Acetylene-chloro'

#== System ==#
atoms = \
    \'''        # remove the leading '\'
     H    0.000    0.000    -2.926;
     C    0.000    0.000    -1.862;
     C    0.000    0.000    -0.653;
    Cl    0.000    0.000     1.060; 
    \'''        # remove the leading '\'
basis = '6-31g'
group = 'c2v'
orb_path = '/data/iwahyutama/Computations/IMAM_TDDMRG/Orbitals_DFT/Acetylene-chloro' + \
           '/B3LYP_6-31g_C2v/Acetylene-chloro.orb.npy'

#== CAS ==#
nCore = 0
nCAS = 33
nelec_t0 = 29
bo_pairs = ((1,2), (3,5), (9,4))
'''
#============================#





#==== Input file ====#
inp_file = str(sys.argv[1])
inputs = bo_inputs.get_inputs(inp_file)
if inputs['dump_inputs']:
    print('\nInput parameters:')
    for kw in inputs:
        print('  ', kw, ' = ', inputs[kw])
    print(' ')


#==== Sample directory from which the PDMs are loaded ====#
if inputs['sample_dir'] == 'DEFINE_LATER':
    inputs['sample_dir'] = './' + inputs['prefix'] + '.sample'    

    
#==== Setting up the system ====#
mol = gto.M(atom=inputs['atoms'], basis=inputs['basis'], ecp=inputs['ecp'],
            symmetry=inputs['group'])
atom_symbol = [mol.atom_symbol(i) for i in range(0, mol.natm)]
ovl = mol.intor('int1e_ovlp')
nocc = inputs['nCore'] + inputs['nCAS']
print('No. of bases = ', mol.nao)
print('No. of core orbitals = ', inputs['nCore'])
print('No. of CAS orbitals = ', inputs['nCAS'])


#==== Load and construct the orbitals ====#
orbs = np.zeros((2, mol.nao, nocc))
orbs[0,:,:] = orbs[1,:,:] = np.load(inputs['orb_path'])[:,0:nocc]


#==== Construct the time array ====#
tt = extract_time.get(inputs['sample_dir'])
idsort = np.argsort(tt)
n_tevo = len(tt)
print('Time evolution directory = ', inputs['sample_dir'])
print('Number of time points = ', n_tevo)


#==== Bond orders IDs ====#
bo_pairs_ = tuple( [ (inputs['bo_pairs'][i][0]-1,inputs['bo_pairs'][i][1]-1) for i in
                     range(0,len( inputs['bo_pairs'] )) ] )


#==== Calculate the time-dependent bond orders ====#
print('\nCalculating and printing bond orders:')
pdm_dir = glob.glob(inputs['sample_dir'] + '/tevo-*')
bo_print = print_td_bo(inputs['bo_pairs'], atom_symbol, inputs['prefix'], n_tevo, 8, 
                       inputs['save_txt'], inputs['save_npy'])
bo_print.header()
for i in idsort:
    pdm = np.load(pdm_dir[i] + '/1pdm.npy')
    pdm_full = make_full_dm(inputs['nCore'], pdm)
    tr = np.sum( np.trace(pdm_full, axis1=1, axis2=2) )
    pdm_full = pdm_full * inputs['nelec_t0'] / np.abs(tr)
    print('Sample no. %d,  time = %.6f a.u.' % (i, tt[i]))
    print('  Path = ', pdm_dir[i])
    bo_mul, bo_low = bond_order.calc_pair(mol, pdm_full, orbs, bo_pairs_, ovl)
    bo_print.print_bo(tt[i], bo_low)

    
#==== Print footer (end) ====#
bo_print.footer()
