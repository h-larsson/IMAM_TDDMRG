#! /usr/bin/env python

import sys
import numpy as np
import pyscf
from pyscf import gto, scf

ang2bohr = 1.8897261255

inp_file = str(sys.argv[1])
exec(open(inp_file).read())


#prefix = inp_file[0:len(inp_file)-3]



#==== Define printing range ====#
x = ang2bohr * np.linspace(xl, xr, nx)
y = ang2bohr * np.linspace(yl, yr, ny)
z = ang2bohr * np.linspace(zl, zr, nz)
coords = np.zeros((nx*ny*nz, 3))
co = 0
for i in range(0,nx):
    for j in range(0,ny):
        for k in range(0,nz):            
            coords[co, 0] = x[i]
            coords[co, 1] = y[j]
            coords[co, 2] = z[k]
            co += 1

            
#==== Setting up the system ====#
mol = gto.M(atom=inp_coordinates, basis=inp_basis, ecp=inp_ecp,
            symmetry=inp_symmetry)
na, nb = mol.nelec
n_mo = mol.nao
nocc = nCore + nCAS

print('No. of bases = ', mol.nao)
print('No. of electrons (alpha, beta) = ', na, nb)
print('No. of core orbitals = ', nCore)
print('No. of CAS orbitals = ', nCAS)
mo_c = np.load(mocoeff_path)

            
#==== Evaluate MO's at the above printing range ====#
ao_value = mol.eval_gto("GTOval_sph", coords)
mo_value = ao_value @ mo_c
print('AO_value shape = ', ao_value.shape)
print('MO_coeff shape = ', mo_c.shape)
print('MO_value shape = ', mo_value.shape)


# ==== Evaluate the hole density (input the PDM's in MO basis here) ====#
pdm0 = np.zeros((2, n_mo, n_mo), dtype=complex)
pdm1 = np.zeros((2, n_mo, n_mo), dtype=complex)
for i in range(0,2):
    for j in range(0, nCore): pdm0[i,j,j] = complex(1.0, 0.0)
    for j in range(0, nCore): pdm1[i,j,j] = complex(1.0, 0.0)
    

pdm0_ = np.load(pdmref_path)
for i in range(0,2): pdm0[i, nCore:nocc, nCore:nocc] = pdm0_[i,:,:]
for ifl in range(0, n_sample):
    pdm1_dir = './' + prefix + '.sample/mps_sp-' + str(ifl)
    pdm1_ = np.load(pdm1_dir + '/1pdm.npy')
    for i in range(0,2): pdm1[i, nCore:nocc, nCore:nocc] = pdm1_[i,:,:]
    print('Time point ', ifl)
    print('  Path = ' + pdm1_dir)
    tr = np.trace(np.sum(pdm1, axis=0))
    print('  Trace of 1RDM before normalization = %12.8f (Re), %12.8f (Im)' % (tr.real, tr.imag))

    nel = np.trace(pdm1[0,:,:] + pdm1[1,:,:])
    nel_ref = na + nb - 1
    pdm1 = pdm1/nel * nel_ref
    tr = np.trace(np.sum(pdm1, axis=0))
    print('  Trace of 1RDM after normalization =  %12.8f (Re), %12.8f (Im)' % (tr.real, tr.imag))
    
    with open(pdm1_dir + '/dens_fun', 'w') as densplot:
        co = 0
        for i in range(0,nx):
            for j in range(0,ny):
                for k in range(0,nz):
                    densf = np.einsum('ij, i, j', np.sum(pdm0-pdm1, axis=0), mo_value[co,:],
                                      mo_value[co,:])
                    densplot.write('%8.4f %8.4f %8.4f %22.14e\n' %
                                  (x[i], y[j], z[k], densf.real))
                    co = co + 1
    
                densplot.write(' \n')
    print(' ')
