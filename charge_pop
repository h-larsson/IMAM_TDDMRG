#! /usr/bin/env python

import sys
import numpy as np
import pyscf
from pyscf import gto, scf
from scipy.linalg import eigh


inp_file = str(sys.argv[1])
exec(open(inp_file).read())


#prefix = inp_file[0:len(inp_file)-3]


            
#==== Setting up the system ====#
mol = gto.M(atom=inp_coordinates, basis=inp_basis, ecp=inp_ecp,
            symmetry=inp_symmetry)
na, nb = mol.nelec
n_mo = mol.nao
nocc = nCore + nCAS

print('No. of bases = ', mol.nao)
print('No. of electrons (alpha, beta) = ', na, nb)
print('No. of core orbitals = ', nCore)
print('No. of CAS orbitals = ', nCAS)
mo_c = np.load(mocoeff_path)

            
# ==== Evaluate the hole density (input the PDM's in MO basis here) ====#
atom_ao_range = [None] * mol.natm
start_found = False
ia = 0
print('AO labels:')
print(mol.ao_labels(fmt=False))
for ia in range(0, mol.natm):
    for ib in range(0, n_mo):
        ibm = min(ib+1, n_mo-1)
        if mol.ao_labels(fmt=False)[ib][0] == ia:
            if not start_found:
                ia_start = ib
                start_found = True
            if mol.ao_labels(fmt=False)[ibm][0] == ia+1 or \
               ib == n_mo-1:
                ia_last = ib
                start_found = False
                break
    atom_ao_range[ia] = (ia_start, ia_last)
    print(atom_ao_range[ia])

            
print('atom_ao_range = ', atom_ao_range)


ovl = mol.intor('int1e_ovlp')
es, U = eigh(ovl)
ovl_half = U @ (np.diag( np.sqrt(es) ) @ U.conj().T)

pdm1 = np.zeros((2, n_mo, n_mo), dtype=complex)
for i in range(0,2):
    for j in range(0, nCore): pdm1[i,j,j] = complex(1.0, 0.0)

for ifl in range(0, n_sample):
    pdm1_dir = './' + prefix + '.sample/mps_sp-' + str(ifl)
    pdm1_ = np.load(pdm1_dir + '/1pdm.npy')
    P = np.zeros((n_mo, n_mo), dtype=complex)
    for i in range(0,2):
        pdm1[i, nCore:nocc, nCore:nocc] = pdm1_[i,:,:]
        P = P + mo_c @ (pdm1[i,:,:] @ mo_c.T)
    
    print('P = %13.8f  %13.8f' % (P[3,14].real, P[3,14].imag))
    print('P = %13.8f  %13.8f' % (P[14,3].real, P[14,3].imag))

    
    Tmul = np.einsum('ij, ji -> i', P, ovl)
    qmul = [None] * mol.natm
    Tlow = np.einsum('ij, jk, ki -> i', ovl_half, P, ovl_half)
    qlow = [None] * mol.natm
    for ia in range(0, mol.natm):
        ib_1 = atom_ao_range[ia][0]
        ib_2 = atom_ao_range[ia][1]

        #==== Mulliken population ====#
        qmul[ia] = mol.atom_charge(ia) - np.sum( Tmul[ib_1:ib_2+1] )

        #==== Lowdin population ====#
        qlow[ia] = mol.atom_charge(ia) - np.sum( Tlow[ib_1:ib_2+1] )
    print('  %5d)  Trace(Tmul) = (%12.6f, %12.6fj)' % (ifl, np.sum(Tmul.real), np.sum(Tmul.imag)))
    print('  %5s   Trace(Tlow) = (%12.6f, %12.6fj)' % (' ', np.sum(Tlow.real), np.sum(Tlow.imag)))

    if ifl==0:
        mode = 'w'
    else:
        mode = 'a'

    #==== Print Mulliken population ====#
    with open('./' + prefix + '.mul', mode) as mull_plot:
        mull_plot.write(f'{ifl:5d}')
        for ia in range(0, mol.natm):
            mull_plot.write('    %11.6f%11.6f' % (qmul[ia].real, qmul[ia].imag))
        mull_plot.write('\n')

    #==== Print Lowdin population ====#
    with open('./' + prefix + '.low', mode) as low_plot:
        low_plot.write(f'{ifl:5d}')
        for ia in range(0, mol.natm):
            low_plot.write('    %11.6f%11.6f' % (qlow[ia].real, qlow[ia].imag))
        low_plot.write('\n')
